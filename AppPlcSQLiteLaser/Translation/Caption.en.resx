<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnChangePassword" xml:space="preserve">
    <value>Change password</value>
  </data>
  <data name="btnExportData" xml:space="preserve">
    <value>Export Data</value>
  </data>
  <data name="btnLogon" xml:space="preserve">
    <value>Logon</value>
  </data>
  <data name="btnManualCheck" xml:space="preserve">
    <value>Check</value>
  </data>
  <data name="btnSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="btnSetting" xml:space="preserve">
    <value>Configure</value>
  </data>
  <data name="capError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="capInfo" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="gbAdmin" xml:space="preserve">
    <value>Admin account</value>
  </data>
  <data name="gbFolder" xml:space="preserve">
    <value>Folder contains tested result</value>
  </data>
  <data name="gbInfo" xml:space="preserve">
    <value>Information:</value>
  </data>
  <data name="gbProcess" xml:space="preserve">
    <value>Process product:</value>
  </data>
  <data name="gbProduct" xml:space="preserve">
    <value>Product status:</value>
  </data>
  <data name="gbScan" xml:space="preserve">
    <value>Scan Product</value>
  </data>
  <data name="gbSystem" xml:space="preserve">
    <value>System information:</value>
  </data>
  <data name="gbTest" xml:space="preserve">
    <value>Test product:</value>
  </data>
  <data name="lblCheckedDate" xml:space="preserve">
    <value>Tested date:</value>
  </data>
  <data name="lblCheckedStatus" xml:space="preserve">
    <value>Tested status:</value>
  </data>
  <data name="lblConfirmPassword" xml:space="preserve">
    <value>Confirm password:</value>
  </data>
  <data name="lblFailed" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="lblFolder" xml:space="preserve">
    <value>Folder contains tested result:</value>
  </data>
  <data name="lblFolderStatus" xml:space="preserve">
    <value>Status:</value>
  </data>
  <data name="lblLanguage" xml:space="preserve">
    <value>Language:</value>
  </data>
  <data name="lblLatestProcessedProduceCode" xml:space="preserve">
    <value>Latest processed product code:</value>
  </data>
  <data name="lblLatestTestedProduceCode" xml:space="preserve">
    <value>Latest tested product:</value>
  </data>
  <data name="lblLatestTestedStatus" xml:space="preserve">
    <value>Result:</value>
  </data>
  <data name="lblNewPassword" xml:space="preserve">
    <value>New password:</value>
  </data>
  <data name="lblPassed" xml:space="preserve">
    <value>Passed</value>
  </data>
  <data name="lblPassword" xml:space="preserve">
    <value>Password:</value>
  </data>
  <data name="lblProcessedDate" xml:space="preserve">
    <value>Processed date:</value>
  </data>
  <data name="lblProductCode" xml:space="preserve">
    <value>Product code:</value>
  </data>
  <data name="lblServer" xml:space="preserve">
    <value>Server contains processed result:</value>
  </data>
  <data name="lblServerStatus" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="lblTotalTestedFailedToday" xml:space="preserve">
    <value>Total failed tested product today:</value>
  </data>
  <data name="lblTotalTestedPassedToday" xml:space="preserve">
    <value>Total passed tested product today:</value>
  </data>
  <data name="lblUserName" xml:space="preserve">
    <value>Username:</value>
  </data>
  <data name="msgCheckConnection" xml:space="preserve">
    <value>Checking connection...</value>
  </data>
  <data name="msgConfirmPassword" xml:space="preserve">
    <value>New password and confirmed password must be the same</value>
  </data>
  <data name="msgFolderNotAvailable" xml:space="preserve">
    <value>Folder is not available</value>
  </data>
  <data name="msgInitServer" xml:space="preserve">
    <value>Initialize server contains processed result...</value>
  </data>
  <data name="msgInvalidUsernameAndPassword" xml:space="preserve">
    <value>Invalid username and password</value>
  </data>
  <data name="msgNoData" xml:space="preserve">
    <value>No data!</value>
  </data>
  <data name="msgProductAlreadyProcessed" xml:space="preserve">
    <value>Product was already processed, cannot process again</value>
  </data>
  <data name="msgProductCanBeProcessed" xml:space="preserve">
    <value>Tested result is passed, product can be processed</value>
  </data>
  <data name="msgProductNotTested" xml:space="preserve">
    <value>Product is not tested</value>
  </data>
  <data name="msgProductTestedFailed" xml:space="preserve">
    <value>The tested result is failed, product cannot be processed</value>
  </data>
  <data name="msgRunning" xml:space="preserve">
    <value>Running</value>
  </data>
  <data name="msgSaveSuccess" xml:space="preserve">
    <value>Save successfully</value>
  </data>
  <data name="msgServerNotAvailable" xml:space="preserve">
    <value>Cannot connect server contains processed result!</value>
  </data>
  <data name="msgStopped" xml:space="preserve">
    <value>Stopped</value>
  </data>
  <data name="rdbManual" xml:space="preserve">
    <value>Input product code manually</value>
  </data>
  <data name="rdbScanner" xml:space="preserve">
    <value>Scan with scanner</value>
  </data>
</root>